expandChildren(children) ::= <<
^children:{c |
^if(c.ArchimateElement)^
   * - :ref:`^c.ArchimateConcept.Id^`
     - :ref:`^c.ArchimateConcept.Class.SimpleName^`
^elseif(c.ReferencedModel)^
   * - `^c.Name;format="xml-encode"^` :ref:`^c.ReferencedModel.Id^`
     - `^c.ReferencedModel.Viewpoint^`
^elseif(c.Bounds)^
^if(c.Name && !c.Name.Empty)^
   * - `Object ^c.Name;format="xml-encode"^`
     - `^c.Class.SimpleName^`  
^else^
   * - `Unnamed Object ^c.Id^`
     - `^c.Class.SimpleName^` 
^endif^
^endif^
^if(c.Children)^
^expandChildren(c.Children)^		
^endif^
}^
>>

expandChildrenRel(children) ::= <<
^children:{c |
^if(c.ArchimateElement)^
^if(c.SourceConnections)^
^c.SourceConnections:{r |
^if(r.ArchimateConcept)^
   * - :ref:`^r.ArchimateConcept.Id^`
     - :ref:`^r.ArchimateConcept.Class.SimpleName^`
     - :ref:`^r.ArchimateConcept.Source.Id^`
     - :ref:`^r.ArchimateConcept.Target.Id^`
^endif^
}^
^endif^
^endif^
^if(c.Children)^
^expandChildrenRel(c.Children)^		
^endif^
}^
>>

expandAreasForChildren(children) ::= <<
^reverse(children):{c |
	^if(c.Children)^
		^expandAreasForChildren(c.Children)^
	^endif^
	^if(c.ArchimateElement)^
		<area shape="rect" coords="^bounds(c, "X1")^,^bounds(c, "Y1")^,^bounds(c, "X2")^,^bounds(c, "Y2")^" href="../elements/^c.ArchimateElement.Id^.html"  target="element">
	^elseif(c.ReferencedModel)^
		<area shape="rect" coords="^bounds(c, "X1")^,^bounds(c, "Y1")^,^bounds(c, "X2")^,^bounds(c, "Y2")^" href="../views/^c.ReferencedModel.Id^.html"  target="view">
    <!-- Other diagram objects -->
    ^elseif(c.Bounds)^
        <area shape="rect" coords="^bounds(c, "X1")^,^bounds(c, "Y1")^,^bounds(c, "X2")^,^bounds(c, "Y2")^" href="../objects/^c.Id^.html" target="element" >
	^endif^
}^
>>

bounds(c, pos) ::= "^map.(c.Id).(pos)^"

frame(element, map) ::= <<
.. _^element.Id^:

^if(element.Name && element.Name.Empty)^
^element.Class.SimpleName^
==========================

^else^
^element.Name;format="xml-encode"^
==================================

^endif^
^if(element.Viewpoint)^
:term:`viewpoint_^element.Viewpoint^`

^elseif(!element.Purpose)^
(:term:`^element.Class.SimpleName^`)
   
^endif^
	
^if(element.Children && !element.Bounds)^
.. image:: ../images/^element.Id^.*
   :alt: ^element.Name^

.. raw:: html

   <map id="^element.Id^map">
   ^expandAreasForChildren(element.Children)^
   </map>

^endif^

^if(element.Source)^
Element Links
-------------

Source: :ref:`^element.Source.Id^`
Target: :ref:`^element.Target.Id^`

^endif^

^if(element.Properties)^
Element Properties
------------------

.. list-table:: Element Properties
   :header-rows: 1

   * - Key
     - Value
^element.Properties:{p | 
   * - ^p.Key;format="xml-encode"^
     - ^p.Value;format="xml-encode"^
}^
^endif^

^if(element.Children)^
Element Children
----------------

.. list-table:: Element Children
   :header-rows: 1

   * - Name
     - Type
^expandChildren(element.Children)^

Reference Children
------------------
.. list-table:: Reference Children
   :header-rows: 1
   
   * - Name
     - Type
     - Source
     - Target
^expandChildrenRel(element.Children)^

^endif^ 

^if(element.Documentation)^
Documentation
-------------

^element.Documentation^

^endif^

^if(element.Content)^
Content
-------

^element.Content^

^endif^

>>
