expandChildren(children) ::= <<
^children:{c |
^if(c.ArchimateElement)^
   * - `^c.Name;format="xml-encode"^ <../elements/^c.ArchimateConcept.Id^.html>`__
     - `^c.ArchimateConcept.Class.SimpleName^ <../elements/^c.ArchimateConcept.Id^.html>`__
^elseif(c.ReferencedModel)^
   * - `^c.Name;format="xml-encode"^ <../views/^c.ReferencedModel.Id^.html>`__
     - `^c.ReferencedModel.Viewpoint^ <../views/^c.ReferencedModel.Id^.html>`__
^elseif(c.Bounds)^
^if(c.Name)^
   * - `Object ^c.Name;format="xml-encode"^ <../objects/^c.Id^.html>`__
^else^
   * - `Unnamed Object <../objects/^c.Id^.html>`__
^endif^
     - `^c.Class.SimpleName^ <../objects/^c.Id^.html>`__ 
^endif^
^if(c.Children)^
^expandChildren(c.Children)^		
^endif^

}^
>>

expandChildrenRel(children) ::= <<
^children:{c |
  ^if(c.ArchimateElement)^
    ^if(c.SourceConnections)^
      ^c.SourceConnections:{r |
        ^if(r.ArchimateConcept)^
   * - `^r.Name;format="xml-encode"^ <../elements/^r.ArchimateConcept.Id^.html>`__
     - `^r.ArchimateConcept.Class.SimpleName^ <../elements/^r.ArchimateConcept.Id^.html>`__
     - `^r.ArchimateConcept.Source.Name;format="xml-encode"^ <../elements/^r.ArchimateConcept.Source.Id^.html>`__
     - `^r.ArchimateConcept.Target.Name;format="xml-encode"^ <../elements/^r.ArchimateConcept.Target.Id^.html>`__
        ^endif^
	  }^
    ^endif^
  ^endif^
^if(c.Children)^
^expandChildrenRel(c.Children)^		
^endif^
}^
>>

expandFolderForQuery(folder) ::= <<
dataFolders.push({id:"^folder.Id^", type:"^folder.Class.SimpleName^", name:decodeURL("^folder.Name;format="url-encode"^"), documentation:decodeURL("^folder.Documentation;format="url-encode"^")\});
^folder.Folders:{f |
	dataFoldersContent.push({folderid:"^folder.Id^", contentid:"^f.Id^", contenttype:"^f.Class.SimpleName^"\});
	^expandFolderForQuery(f)^
}^
^folder.Elements:{c |
	dataFoldersContent.push({folderid:"^folder.Id^", contentid:"^c.Id^", contenttype:"^c.Class.SimpleName^"\});
	^if(c.Source)^
		dataRelationships.push({id:"^c.Id^", type:"^c.Class.SimpleName^", name:decodeURL("^c.Name;format="url-encode"^"), documentation:decodeURL("^c.Documentation;format="url-encode"^"), sourceid:"^c.Source.Id^", targetid:"^c.Target.Id^"\});
		^c.Properties:{p |
			dataProperties.push({conceptid:"^c.Id^", propkey:decodeURL("^p.Key;format="url-encode"^"), propvalue:decodeURL("^p.Value;format="url-encode"^")\});
		}^
	^elseif(c.ConnectionRouterType)^
		dataViews.push({id:"^c.Id^", type:"^c.Class.SimpleName^", name:decodeURL("^c.Name;format="url-encode"^"), documentation:decodeURL("^c.Documentation;format="url-encode"^")\});
		^c.Properties:{p |
			dataProperties.push({conceptid:"^c.Id^", propkey:decodeURL("^p.Key;format="url-encode"^"), propvalue:decodeURL("^p.Value;format="url-encode"^")\});
		}^
		^expandViewElementsForQuery(c, c.Children)^
		^expandViewRelsForQuery(c, c.Children)^
	^else^
		dataElements.push({id:"^c.Id^", type:"^c.Class.SimpleName^", name:decodeURL("^c.Name;format="url-encode"^"), documentation:decodeURL("^c.Documentation;format="url-encode"^")\});
		^c.Properties:{p |
			dataProperties.push({conceptid:"^c.Id^", propkey:decodeURL("^p.Key;format="url-encode"^"), propvalue:decodeURL("^p.Value;format="url-encode"^")\});
		}^
	^endif^
}^
>>

expandViewElementsForQuery(view, children) ::= <<
^children:{c |
	^if(c.ArchimateElement)^
		dataViewsContent.push({viewid:"^view.Id^", contentid:"^c.ArchimateElement.Id^", contenttype:"^c.ArchimateElement.Class.SimpleName^"\});
	^elseif(c.ReferencedModel)^
		dataViewsContent.push({viewid:"^view.Id^", contentid:"^c.ReferencedModel.Id^", contenttype:"^c.ReferencedModel.Class.SimpleName^"\});
	^endif^
	^if(c.Children)^
		^expandViewElementsForQuery(view, c.Children)^		
	^endif^
}^
>>

expandViewRelsForQuery(view, children) ::= <<
^children:{c |
	^if(c.ArchimateElement)^
		^if(c.SourceConnections)^
			^c.SourceConnections:{r |
				^if(r.ArchimateConcept)^
					dataViewsContent.push({viewid:"^view.Id^", contentid:"^r.ArchimateConcept.Id^", contenttype:"^r.ArchimateConcept.Class.SimpleName^"\});
				^endif^
			}^
		^endif^
	^endif^
	^if(c.Children)^
		^expandViewRelsForQuery(view, c.Children)^		
	^endif^
}^
>>

expandAreasForChildren(children) ::= <<
^reverse(children):{c |
	^if(c.Children)^
		^expandAreasForChildren(c.Children)^
	^endif^
	^if(c.ArchimateElement)^
		<area shape="rect" coords="^bounds(c, "X1")^,^bounds(c, "Y1")^,^bounds(c, "X2")^,^bounds(c, "Y2")^" href="../elements/^c.ArchimateElement.Id^.html"  target="element">
	^elseif(c.ReferencedModel)^
		<area shape="rect" coords="^bounds(c, "X1")^,^bounds(c, "Y1")^,^bounds(c, "X2")^,^bounds(c, "Y2")^" href="../views/^c.ReferencedModel.Id^.html"  target="view">
    <!-- Other diagram objects -->
    ^elseif(c.Bounds)^
        <area shape="rect" coords="^bounds(c, "X1")^,^bounds(c, "Y1")^,^bounds(c, "X2")^,^bounds(c, "Y2")^" href="../objects/^c.Id^.html" target="element" >
	^endif^
}^
>>

bounds(c, pos) ::= "^map.(c.Id).(pos)^"

frame(element, map) ::= <<

^if(element.Name && element.Name.Empty)^
^element.Class.SimpleName^
==========================

^else^
^element.Name;format="xml-encode"^
==================================
^endif^

^if(element.Viewpoint)^
   (^element.Viewpoint^)

.. note::

   Viewpoint hint here.

^elseif(!element.Purpose)^
	(^element.Class.Name^)

.. note:: 

	(^element.Class.Name^ hint here)
   
^endif^
	

^if(element.Children && !element.Bounds)^
.. image:: ../images/^element.Id^.*
   :alt: ^element.Name^

.. Image maps aren't supported yet . . . 
.. :usemap: #^element.Id^map

^expandAreasForChildren(element.Children)^

^endif^

^if(element.Source)^
Element Links
-------------

Source: `^element.Source.Name;format="xml-encode"^ <../elements/^element.Source.Id^.html>`__
Target: `^element.Target.Name;format="xml-encode"^ <../elements/^element.Target.Id^.html>`__

^endif^

^if(element.Properties)^
Element Properties
----------------

.. list-table:: Element Properties
   :header-rows: 1

   * - Key
     - Value
^element.Properties:{p | 
   * - ^p.Key;format="xml-encode"^
     - ^p.Value;format="xml-encode"^
}^
^endif^

^if(element.Children)^
Element Children
----------------

.. list-table:: Element Children
   :header-rows: 1

   * - Name
     - Type
^expandChildren(element.Children)^

.. list-table:: Children
   :header-rows: 1
   
   * - Name
     - Type
     - Source
     - Target
^expandChildrenRel(element.Children)^

^endif^ 

^if(element.Documentation)^
Documentation
-------------

^element.Documentation^

^endif^

^if(element.Content)^
Content
-------

^element.Content^

^endif^

>>
